.TH PSC 3 "June 2020"
.SH NAME
.PP
psc \- a very simple multiplayer game library.
.SH SYNOPSIS
.PP
.B
#inclue <psc.h>
.PP
.B
typedef int (*psc_init)(void);
.br
.B
typedef int (*psc_loop)(void *\f[I]state\f[], int \f[I]state_changed\f[], int \f[I]player_id\f[]);
.br
.B
typedef void (*psc_fin)(void);
.PP
.B
void psc_run(void *\f[I]state\f[], size_t \f[I]len\f[], psc_init \f[I]init\f[], psc_loop \f[I]loop\f[], psc_fin \f[I]fin\f[], int \f[I]nclient\f[], int \f[I]tick\f[]);
.SH DESCRIPTION
.PP
This library provides only one function for creating multiplayer terminal
games. It uses a server-client model for connecting players together.
.PP
.BI psc_run()
starts the main game loop. This function takes a number of arguments which allow
the user to specify the game\-play. \f[I]state\f[] is a pointer to the game state,
which should be \f[I]len\f[] bytes in size, pre-allocated and initialised prior to
calling \f[BI]psc_run()\f[]. This game state will be shared between the server
instance and any connected clients.
\f[I]init\f[] is a pointer to a function which is called once before starting the
game loop, to allow the user to perform any necessary initialisations (such as
preparing the terminal screen). On failure this function should return -1.
\f[I]loop\f[] is a pointer to a function which is called
once per game loop, with access to the current game state. It takes as arguments:
.TP
void *\f[I]state\f[]
.RS
pointer to the current game state.
.RE
.TP
int \f[I]state_changed\f[]
.RS
TRUE if the game state has changed, FALSE otherwise.
.RE
.TP
int \f[I]player_id\f[]
.RS
a unique identifier for this player.
.RE
.PP
\f[I]loop\f[] should return a positive integer to continue to the next loop,
or a negative integer to end the main game loop.
\f[I]fin\f[] is a pointer to a function which is called after the game loop has
finished, to clean up any resources allocated by \f[I]init\f[]. This function is
required to ensure the application can cleanly exit.
The penultimate argument to \f[B]psc_run()\f[]
is \f[I]nclients\f[], which indicates
how many clients will connect to the server: this should be an integer greater than
zero for the server instance, and zero for any client instances. The final argument,
\f[I]tick\f[], is the minimum time for each iteration of the game loop (in milliseconds).
.SH NOTES
.PP
The user-defined \f[I]loop\f[] function can use the \f[I]player_id\f[]
to avoid making overlapping changes to the game state, for example using a turn-based
gameplay mechanic.
.PP
When \f[B]psc_run()\f[] is called, it will open a log file 'psc.log' in the
working directory. This file will record information such as errors and successful
connections.
.PP
The library handles the following terminations of game instances:
(i) if either server or client(s) exit cleanly (i.e. as determined by the user's \f[I]loop\f[]
function returning negative), then all other instances also exit cleanly; (ii) if a client instance
disconnects as a result of unexpected exit (see signal handling details below),
the server will wait for a new client to replace
the original; (iii) if a server instance disconnects as a result of an unexpected exit, all
client instances will exit.
.PP
Currently only basic signal handling is implemented. The following signal interrupts
are handled internally, causing the game to exit cleanly:
.B SIGTERM
,
.B SIGINT
,
.B SIGQUIT
, and
.B SIGPIPE.
.B SIGWINCH
is simply ignored. Note that signal handling is established after the call to the user
defined \f[I]init()\f[] function, so any user defined signal handling will be overriden.
.SH SEE ALSO
.IR curses(3)
.SH BUGS
.PP
The signals mentioned above (SIGINT, SIGTERM, SIGQUIT) are not handled during the connection
phase, when the server is waiting for clients to connect to the socket (and prior to the
beginning of the main game loop). A workaround to interrupt programs in this state is to
send another signal, e.g. SIGALRM.
.PP
Please post an issue on the repository \f[BI]https://github.com/lewis-weinberger/psc\f[].
.SH AUTHORS
Lewis Weinberger.
